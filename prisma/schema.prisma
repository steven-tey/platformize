// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// schema.prisma

model Post {
  id            String       @id @default(cuid())
  title         String       @default("Untitled Post")
  description   String?     
  content       String?     @db.Text
  slug          String      @default(cuid())
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  published     Boolean      @default(false)
  Publication   Publication? @relation(fields: [publicationUrl], references: [url])
  publicationUrl String?
  pinnedPost  PinnedPost[]
  @@unique([slug, publicationUrl], name: "slug_publication_constraint")
}

model Publication {
  id          String  @id @default(cuid())
  name        String  @default("Untitled Publication")
  description String  @default("The hottest gossip about armadilos")
  logo        String  @default("https://tailwindui.com/img/logos/workflow-mark-indigo-600.svg")
  url         String  @unique @default(cuid())
  users       PublicationUser[]
  posts       Post[]
  pinnedPost  PinnedPost[]
}

model PinnedPost {
  id              String @id @default(cuid())
  publication     Publication   @relation(fields: [publicationId], references: [id])
  post            Post    @relation(fields: [postId], references: [id])
  publicationId   String  @unique
  postId          String
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  publications  PublicationUser[]
}

model PublicationUser {
  id            String @id @default(cuid())
  publication     Publication   @relation(fields: [publicationId], references: [id])
  user            User    @relation(fields: [userId], references: [id])
  publicationId   String
  userId          String
  role            String
  @@unique([publicationId, userId], name: "publication_user_constraint")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  Int
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
